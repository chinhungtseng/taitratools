load_all()
test()
ddocument()
document()
test()
expect_identical(
break_line("I want to go to the pond, Mother,” one baby duck quacked."),
"I want to go to the pond,\n Mother,” one baby duck q\nuacked."
)
test()
expect_equal
test()
test()
test()
break_line("I want to go to the pond, Mother, one baby duck quacked.")
break_line("Lets go!  Lets go! two more quacked excitedly.", length = 5)
check()
test()
test_df <- data.frame(
country = c("A", "B", "C", "D"),
`2018` = c(100, 200, 300, 400),
`2019` = rep(200, 4)
)
test_df
test_df <- data.frame(
country = c("A", "B", "C", "D"),
year2018 = c(100, 200, 300, 400),
year2019 = rep(200, 4)
)
test_df
test_df(test_df$year2019, test_df$year2018)
cal_growth_rate(test_df$year2019, test_df$year2018)
expect_equivalent(
cal_growth_rate(test_df$year2019, test_df$year2018),
c(100.0000, 0.0000, -33.3333, -50.0000)
)
test()
test()
cal_share
cal_share(test_df$year2019, sum(test_df$year2019))
cal_share(test_df$year2018, sum(test_df$year2018))
test_that("cal_share", {
expect_equivalent(
cal_share(test_df$year2018, sum(test_df$year2018)),
c(10, 20, 30, 40)
)
})
cal_cagr
test_df <- data.frame(
country = c("A", "B", "C", "D"),
year2017 = c(200, 300, 400, 500),
year2018 = c(100, 200, 300, 400),
year2019 = rep(200, 4)
)
test_df
cal_cagr(test_df$year2019, test_df$year2018, 2)
test_that("cal_cagr", {
expect_equivalent(
cal_cagr(test_df$year2019, test_df$year2018, 2),
c(41.4214, 0.0000, -18.3503, -29.2893)
)
})
cal_cagr(test_df$year2019, test_df$year2017, 2)
test_that("cal_cagr", {
expect_equivalent(
cal_cagr(test_df$year2019, test_df$year2017, 2),
c(0.0000, -18.3503, -29.2893, -36.7544)
)
})
test()
tt_hscode_show("e動物")
tt_hscode_show("動物")
tt_hscode_show("活動物")
tt_hscode_show("01活動物")
tt_hscode_show(chinese = "活動物")
tt_hscode_show
# sample data
mof_tbl <- tt_read_mof("2018-01", "2018-02", period = 0, direct = "export", money = "usd")
mof_tbl
# sample data
.sample_mof_tbl <- tt_read_mof("2018-01", "2018-01", period = 0, direct = "export", money = "usd")
object.size(.sample_mof_tbl)
7759160 /1024
7759160 /1024/1024
.sample_mof_tbl[c(1, 4, 9, 10)]
# sample data
.sample_mof_tbl <- tt_read_mof("2018-01", "2018-02", period = 0, direct = "export", money = "usd", dep_month_cols = TRUE)
.sample_mof_tbl
.sample_mof_tbl <- .sample_mof_tbl[c(1, 4, 9, 10, 11)]
.sample_mof_tbl
object.size(.sample_mof_tbl)
sample_mof_tbl <- .sample_mof_tbl
.industry_tbl
load_all()
.industry_tbl
tt_bind_industry
tmp_tbl[c("選擇方式", "大項",
"細項", "hscode", "industry")]
tmp_tbl <- .industry_tbl
tmp_tbl[c("選擇方式", "大項",
"細項", "hscode", "industry")]
.df <- tt_read_mof("2019-10")
.df <- tt_read_mof("2019-10", "2019-10")
sub = 8
load_all()
numeric2Chinese(123456789)
numeric2Chinese(12345678987654321)
numeric2Chinese(1234567898765432)
1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1e+1000
1e+100
1e+100 * 4
1e+100 * 900
1e+100 * 900.2
1e+100 * 900.284654651354
1e+100 * 900.284654651354e+900
1e+100 * 900.284654651354e+10
1e+100 * 900.284654651354e+100
1e+100 * 900.284654651354e+100* 900.284654651354e+100
load_all()
load_all()
load_all()
cal_share(1, 5)
cal_share(1, 0)
install()
load_all()
load_all()
tt_hscode_show("機械")
.full_hscode_tbl
tt_hscode_show(chinese = "機械")
tt_hscode_show()
load_all()
tt_hscode_show(chinese = "機械")
tt_hscode_show(hscode = 7310)
tt_hscode_show(hscode = 7612)
tt_hscode_show()
tt_hscode_show(hscode = c(7612, 7310))
tt_hscode_show(chinese = "食品")
tt_hscode_show(chinese = "機械_工具機")
tt_hscode_show(chinese = "工具機")
tt_hscode_show(chinese = "工具機,機械")
tt_hscode_show(chinese = "工具機,機械") %>% View
tt_df_show("PATH_INDUSTRY")
tt_df_show("PATH_INDUSTRY")
load_all()
mof_df <- tt_read_mof("2019-01", "2019-02")
tmp_tbl <- .industry_tbl
# Only keey `hscode` and `industry` columns
tmp_tbl <- tmp_tbl[c("\u9078\u64C7\u65B9\u5F0F", "\u5927\u9805", "\u7D30\u9805", "hscode", "industry")]
output <- vector("list", length = nrow(tmp_tbl))
tmp_tbl
library(parallel)
ncores <- detectCores(logical=F)
ncores
cl <- makeCluster(ncores)
cl
Reduce
.df
.df <- mof_df
clusterApply(cl, x = seq_along(output), fun = function(i) {
print_with_time(sprintf("%s (%3s/%3s)", tmp_tbl[i, ][["industry"]], i, length(output)))
output_pattern <- str2regex(tmp_tbl[i, ][["hscode"]], sep = ",", sub = sub)
output_name <- tmp_tbl[i, ][["industry"]]
if (output_name == "\u5168\u90E8\u7522\u54C1_\u5168\u90E8\u7522\u54C1") {
output_pattern <- "[\\w\\W]+"
}
tmp_output <- .df[stringr::str_detect(.df$hscode, output_pattern), ]
if (nrow(tmp_output) == 0) next()
if (!col_more) {
tmp_output$industry <- tmp_tbl[i, ][["industry"]]
} else {
tmp_output$type <- tmp_tbl[i, ][["\u9078\u64C7\u65B9\u5F0F"]]
tmp_output$major <- tmp_tbl[i, ][["\u5927\u9805"]]
tmp_output$minor <-tmp_tbl[i, ][["\u7D30\u9805"]]
tmp_output$industry <- tmp_tbl[i, ][["industry"]]
}
output[[i]] <- tmp_output
})
clusterApply(cl, x = seq_along(output), fun = function(i) {
# print_with_time(sprintf("%s (%3s/%3s)", tmp_tbl[i, ][["industry"]], i, length(output)))
output_pattern <- str2regex(tmp_tbl[i, ][["hscode"]], sep = ",", sub = sub)
output_name <- tmp_tbl[i, ][["industry"]]
if (output_name == "\u5168\u90E8\u7522\u54C1_\u5168\u90E8\u7522\u54C1") {
output_pattern <- "[\\w\\W]+"
}
tmp_output <- .df[stringr::str_detect(.df$hscode, output_pattern), ]
if (nrow(tmp_output) == 0) next()
if (!col_more) {
tmp_output$industry <- tmp_tbl[i, ][["industry"]]
} else {
tmp_output$type <- tmp_tbl[i, ][["\u9078\u64C7\u65B9\u5F0F"]]
tmp_output$major <- tmp_tbl[i, ][["\u5927\u9805"]]
tmp_output$minor <-tmp_tbl[i, ][["\u7D30\u9805"]]
tmp_output$industry <- tmp_tbl[i, ][["industry"]]
}
output[[i]] <- tmp_output
})
clusterEvalQ(cl, library(taitratools))
clusterApply(cl, x = seq_along(output), fun = function(i) {
# print_with_time(sprintf("%s (%3s/%3s)", tmp_tbl[i, ][["industry"]], i, length(output)))
output_pattern <- str2regex(tmp_tbl[i, ][["hscode"]], sep = ",", sub = sub)
output_name <- tmp_tbl[i, ][["industry"]]
if (output_name == "\u5168\u90E8\u7522\u54C1_\u5168\u90E8\u7522\u54C1") {
output_pattern <- "[\\w\\W]+"
}
tmp_output <- .df[stringr::str_detect(.df$hscode, output_pattern), ]
if (nrow(tmp_output) == 0) next()
if (!col_more) {
tmp_output$industry <- tmp_tbl[i, ][["industry"]]
} else {
tmp_output$type <- tmp_tbl[i, ][["\u9078\u64C7\u65B9\u5F0F"]]
tmp_output$major <- tmp_tbl[i, ][["\u5927\u9805"]]
tmp_output$minor <-tmp_tbl[i, ][["\u7D30\u9805"]]
tmp_output$industry <- tmp_tbl[i, ][["industry"]]
}
output[[i]] <- tmp_output
})
clusterEvalQ(cl, list(library(taitratools), tmp_tbl, output))
tmp_tbl
list(library(taitratools), tmp_tbl, output)
clusterEvalQ(cl, c(library(taitratools), tmp_tbl, output))
clusterEvalQ(cl, c(library(taitratools), "tmp_tbl", "output"))
clusterApply(cl, x = seq_along(output), fun = function(i) {
# print_with_time(sprintf("%s (%3s/%3s)", tmp_tbl[i, ][["industry"]], i, length(output)))
output_pattern <- str2regex(tmp_tbl[i, ][["hscode"]], sep = ",", sub = sub)
output_name <- tmp_tbl[i, ][["industry"]]
if (output_name == "\u5168\u90E8\u7522\u54C1_\u5168\u90E8\u7522\u54C1") {
output_pattern <- "[\\w\\W]+"
}
tmp_output <- .df[stringr::str_detect(.df$hscode, output_pattern), ]
if (nrow(tmp_output) == 0) next()
if (!col_more) {
tmp_output$industry <- tmp_tbl[i, ][["industry"]]
} else {
tmp_output$type <- tmp_tbl[i, ][["\u9078\u64C7\u65B9\u5F0F"]]
tmp_output$major <- tmp_tbl[i, ][["\u5927\u9805"]]
tmp_output$minor <-tmp_tbl[i, ][["\u7D30\u9805"]]
tmp_output$industry <- tmp_tbl[i, ][["industry"]]
}
output[[i]] <- tmp_output
})
cl <- makeCluster(ncores)
stopCluster(cl)
cl <- makeCluster(ncores)
clusterEvalQ(cl, c(library(taitratools), "tmp_tbl", "output"))
clusterApply(cl, x = seq_along(output), fun = function(i) {
# print_with_time(sprintf("%s (%3s/%3s)", tmp_tbl[i, ][["industry"]], i, length(output)))
output_pattern <- str2regex(tmp_tbl[i, ][["hscode"]], sep = ",", sub = sub)
output_name <- tmp_tbl[i, ][["industry"]]
if (output_name == "\u5168\u90E8\u7522\u54C1_\u5168\u90E8\u7522\u54C1") {
output_pattern <- "[\\w\\W]+"
}
tmp_output <- .df[stringr::str_detect(.df$hscode, output_pattern), ]
if (nrow(tmp_output) == 0) next()
if (!col_more) {
tmp_output$industry <- tmp_tbl[i, ][["industry"]]
} else {
tmp_output$type <- tmp_tbl[i, ][["\u9078\u64C7\u65B9\u5F0F"]]
tmp_output$major <- tmp_tbl[i, ][["\u5927\u9805"]]
tmp_output$minor <-tmp_tbl[i, ][["\u7D30\u9805"]]
tmp_output$industry <- tmp_tbl[i, ][["industry"]]
}
output[[i]] <- tmp_output
})
clusterSetRNGStream(cl)
clusterEvalQ
?clusterEvalQ
clusterEvalQ(cl, {
library(taitratools)
tmp_tbl
output
})
stopCluster(cl)
cl <- makeCluster(ncores)
clusterSetRNGStream(cl)
clusterEvalQ(cl, library(taitratools))
clusterExport(cl, c(tmp_tbl, output))
tmp_tbl
tmp_tbl
clusterExport(cl, list(tmp_tbl, output))
clusterExport(cl, c(tmp_tbl, output))
clusterExport(cl, c("tmp_tbl", "output"))
clusterApply(cl, x = seq_along(output), fun = function(i) {
# print_with_time(sprintf("%s (%3s/%3s)", tmp_tbl[i, ][["industry"]], i, length(output)))
output_pattern <- str2regex(tmp_tbl[i, ][["hscode"]], sep = ",", sub = sub)
output_name <- tmp_tbl[i, ][["industry"]]
if (output_name == "\u5168\u90E8\u7522\u54C1_\u5168\u90E8\u7522\u54C1") {
output_pattern <- "[\\w\\W]+"
}
tmp_output <- .df[stringr::str_detect(.df$hscode, output_pattern), ]
if (nrow(tmp_output) == 0) next()
if (!col_more) {
tmp_output$industry <- tmp_tbl[i, ][["industry"]]
} else {
tmp_output$type <- tmp_tbl[i, ][["\u9078\u64C7\u65B9\u5F0F"]]
tmp_output$major <- tmp_tbl[i, ][["\u5927\u9805"]]
tmp_output$minor <-tmp_tbl[i, ][["\u7D30\u9805"]]
tmp_output$industry <- tmp_tbl[i, ][["industry"]]
}
output[[i]] <- tmp_output
})
clusterApply
clusterApply(cl, x = seq_along(output), fun = function(i) {
# print_with_time(sprintf("%s (%3s/%3s)", tmp_tbl[i, ][["industry"]], i, length(output)))
output_pattern <- str2regex(tmp_tbl[i, ][["hscode"]], sep = ",", sub = sub)
output_name <- tmp_tbl[i, ][["industry"]]
if (output_name == "\u5168\u90E8\u7522\u54C1_\u5168\u90E8\u7522\u54C1") {
output_pattern <- "[\\w\\W]+"
}
tmp_output <- .df[stringr::str_detect(.df$hscode, output_pattern), ]
if (nrow(tmp_output) == 0) next()
if (!col_more) {
tmp_output$industry <- tmp_tbl[i, ][["industry"]]
} else {
tmp_output$type <- tmp_tbl[i, ][["\u9078\u64C7\u65B9\u5F0F"]]
tmp_output$major <- tmp_tbl[i, ][["\u5927\u9805"]]
tmp_output$minor <-tmp_tbl[i, ][["\u7D30\u9805"]]
tmp_output$industry <- tmp_tbl[i, ][["industry"]]
}
output[[i]] <<- tmp_output
})
clusterEvalQ(cl, {
library(taitratools)
library(stringr)
})
clusterExport(cl, c("tmp_tbl", "output"))
clusterApply(cl, x = seq_along(output), fun = function(i) {
output_pattern <- str2regex(tmp_tbl[i, ][["hscode"]], sep = ",", sub = sub)
output_name <- tmp_tbl[i, ][["industry"]]
if (output_name == "\u5168\u90E8\u7522\u54C1_\u5168\u90E8\u7522\u54C1") {
output_pattern <- "[\\w\\W]+"
}
tmp_output <- .df[stringr::str_detect(.df$hscode, output_pattern), ]
if (nrow(tmp_output) == 0) next()
if (!col_more) {
tmp_output$industry <- tmp_tbl[i, ][["industry"]]
} else {
tmp_output$type <- tmp_tbl[i, ][["\u9078\u64C7\u65B9\u5F0F"]]
tmp_output$major <- tmp_tbl[i, ][["\u5927\u9805"]]
tmp_output$minor <-tmp_tbl[i, ][["\u7D30\u9805"]]
tmp_output$industry <- tmp_tbl[i, ][["industry"]]
}
output[[i]] <<- tmp_output
})
clusterApply
stopCluster(cl)
.df
ncores <- detectCores(logical=F)
cl <- makeCluster(ncores)
clusterSetRNGStream(cl)
clusterEvalQ(cl, {
library(taitratools)
library(stringr)
})
clusterExport(cl, c("tmp_tbl", "col_more"))
clusterExport(cl, c("tmp_tbl", col_more))
clusterExport(cl, c("tmp_tbl"))
col_more = FALSE
clusterExport(cl, c("tmp_tbl", "col_more"))
output <- clusterApply(cl, x = 1:nrow(tmp_tbl), fun = function(x) {
output_pattern <- str2regex(tmp_tbl[x, ][["hscode"]], sep = ",", sub = sub)
output_name <- tmp_tbl[x, ][["industry"]]
if (output_name == "\u5168\u90E8\u7522\u54C1_\u5168\u90E8\u7522\u54C1") {
output_pattern <- "[\\w\\W]+"
}
tmp_output <- .df[stringr::str_detect(.df$hscode, output_pattern), ]
if (nrow(tmp_output) == 0) next()
if (!col_more) {
tmp_output$industry <- tmp_tbl[x, ][["industry"]]
} else {
tmp_output$type <- tmp_tbl[x, ][["\u9078\u64C7\u65B9\u5F0F"]]
tmp_output$major <- tmp_tbl[x, ][["\u5927\u9805"]]
tmp_output$minor <-tmp_tbl[x, ][["\u7D30\u9805"]]
tmp_output$industry <- tmp_tbl[x, ][["industry"]]
}
tmp_output
})
stopCluster(cl)
nrow(tmp_tbl)
load_all()
.df <- tt_read_mof("2019-01", "2019-01")
tmp_tbl <- .industry_tbl
tmp_tbl
tmp_tbl
# Only keey `hscode` and `industry` columns
tmp_tbl <- tmp_tbl[c("\u9078\u64C7\u65B9\u5F0F", "\u5927\u9805", "\u7D30\u9805", "hscode", "industry")]
output <- vector("list", length = nrow(tmp_tbl))
output
tmp_tbl
output_pattern
tmp_tbl
tmp_tbl$industry
tmp_tbl
ind
i <- 1
output_pattern <- str2regex(tmp_tbl[i, ][["hscode"]], sep = ",", sub = sub)
output_name <- tmp_tbl[x, ][["industry"]]
sub
sub <- 11
output_pattern <- str2regex(tmp_tbl[i, ][["hscode"]], sep = ",", sub = sub)
output_pattern
output_name <- tmp_tbl[x, ][["industry"]]
output_name <- tmp_tbl[i, ][["industry"]]
print_with_time(sprintf("%s (%3s/%3s)", tmp_tbl[i, ][["industry"]], i, length(output)))
if (output_name == "\u5168\u90E8\u7522\u54C1_\u5168\u90E8\u7522\u54C1") {
output_pattern <- "[\\w\\W]+"
}
tmp_output <- .df[stringr::str_detect(.df$hscode, output_pattern), ]
tmp_output
if (nrow(tmp_output) == 0) next()
if (!col_more) {
tmp_output$industry <- tmp_tbl[i, ][["industry"]]
} else {
tmp_output$type <- tmp_tbl[i, ][["\u9078\u64C7\u65B9\u5F0F"]]
tmp_output$major <- tmp_tbl[i, ][["\u5927\u9805"]]
tmp_output$minor <-tmp_tbl[i, ][["\u7D30\u9805"]]
tmp_output$industry <- tmp_tbl[i, ][["industry"]]
}
col_more
tmp_output
df_bind_ind_func <- function(df, i) {
output_pattern <- str2regex(tmp_tbl[i, ][["hscode"]], sep = ",", sub = sub)
output_name <- tmp_tbl[i, ][["industry"]]
if (output_name == "\u5168\u90E8\u7522\u54C1_\u5168\u90E8\u7522\u54C1") {
output_pattern <- "[\\w\\W]+"
}
tmp_output <- .df[stringr::str_detect(.df$hscode, output_pattern), ]
if (nrow(tmp_output) == 0) next()
if (!col_more) {
tmp_output$industry <- tmp_tbl[i, ][["industry"]]
} else {
tmp_output$type <- tmp_tbl[i, ][["\u9078\u64C7\u65B9\u5F0F"]]
tmp_output$major <- tmp_tbl[i, ][["\u5927\u9805"]]
tmp_output$minor <-tmp_tbl[i, ][["\u7D30\u9805"]]
tmp_output$industry <- tmp_tbl[i, ][["industry"]]
}
tmp_output
}
nrow(tmp_tbl)
1:nrow(tmp_tbl)
tmp_tbl
.df
lapply(1:nrow(tmp_tbl), df_bind_ind_func(.df, .))
df_bind_ind_func <- function(.df, i) {
output_pattern <- str2regex(tmp_tbl[i, ][["hscode"]], sep = ",", sub = sub)
output_name <- tmp_tbl[i, ][["industry"]]
if (output_name == "\u5168\u90E8\u7522\u54C1_\u5168\u90E8\u7522\u54C1") {
output_pattern <- "[\\w\\W]+"
}
tmp_output <- .df[stringr::str_detect(.df$hscode, output_pattern), ]
if (nrow(tmp_output) == 0) next()
if (!col_more) {
tmp_output$industry <- tmp_tbl[i, ][["industry"]]
} else {
tmp_output$type <- tmp_tbl[i, ][["\u9078\u64C7\u65B9\u5F0F"]]
tmp_output$major <- tmp_tbl[i, ][["\u5927\u9805"]]
tmp_output$minor <-tmp_tbl[i, ][["\u7D30\u9805"]]
tmp_output$industry <- tmp_tbl[i, ][["industry"]]
}
tmp_output
}
lapply(1:nrow(tmp_tbl), df_bind_ind_func(.df, .))
df_bind_ind_func <- function(i) {
output_pattern <- str2regex(tmp_tbl[i, ][["hscode"]], sep = ",", sub = sub)
output_name <- tmp_tbl[i, ][["industry"]]
if (output_name == "\u5168\u90E8\u7522\u54C1_\u5168\u90E8\u7522\u54C1") {
output_pattern <- "[\\w\\W]+"
}
tmp_output <- .df[stringr::str_detect(.df$hscode, output_pattern), ]
if (nrow(tmp_output) == 0) next()
if (!col_more) {
tmp_output$industry <- tmp_tbl[i, ][["industry"]]
} else {
tmp_output$type <- tmp_tbl[i, ][["\u9078\u64C7\u65B9\u5F0F"]]
tmp_output$major <- tmp_tbl[i, ][["\u5927\u9805"]]
tmp_output$minor <-tmp_tbl[i, ][["\u7D30\u9805"]]
tmp_output$industry <- tmp_tbl[i, ][["industry"]]
}
tmp_output
}
lapply(1:nrow(tmp_tbl), df_bind_ind_func)
col_more <- TRUE
lapply(1:nrow(tmp_tbl), df_bind_ind_func)
1:nrow(tmp_tbl)
tmp_tbl[i, ][["industry"]]
ncores <- detectCores(logical=F)
library(parallel)
ncores <- detectCores(logical=F)
cl <- makeCluster(ncores)
clusterSetRNGStream(cl)
clusterEvalQ(cl, {
library(taitratools)
library(stringr)
})
clusterExport(cl, c("tmp_tbl", "col_more", ".df"))
output <- clusterApply(cl, x = 1:nrow(tmp_tbl), fun = df_bind_ind_func)
df_bind_ind_func
suppress
load_all()
document()
install()
build()
check()
check()
build()
load_all()
install()
install()
load_all()
document()
install()
build()
