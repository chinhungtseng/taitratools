}
tt_update_data <- function() {
# tt_source_path data -------------------------
tmp_path <- readxl::read_xlsx("inst/extdata/tt_source_path.xlsx")
.tt_source_path <- as.list(tmp_path$path)
names(.tt_source_path) <- tmp_path$name
# industry data -----------------------------
.industry_tbl <- tt_read_table(tt_get_path("PATH_INDUSTRY")) %>%
dplyr::mutate_at(dplyr::vars("reports_version_industry21", "reports_version_1", "reports_version_2"), list(~ tidyr::replace_na(., 0)))
.industry_tbl_en <- rlang::set_names(.industry_tbl, c("index", "type", "major", "minor", "hscode6", "hscode11", "hscode_dights",
"hscode", "industry", "reports_version_1", "reports_version_1_order", "reports_version_2",
"reports_version_2_order", "reports_version_2_ind_name", "reports_version_industry21", "reports_version_industry21_order"))
# industry21 data -----------------------------
.tt_ind21_list <- .industry_tbl[.industry_tbl[["reports_version_industry21"]] == 1, ][["\u7DE8\u865F"]]
.tt_ind21_tbl <- .industry_tbl[.industry_tbl[["\u7DE8\u865F"]] %in% .tt_ind21_list, ][c("\u7DE8\u865F", "industry", "reports_version_industry21_order")]
.tt_ind21_tbl_en <- .industry_tbl_en[.industry_tbl_en[["index"]] %in% .tt_ind21_list, ][c("index", "industry", "reports_version_industry21_order")]
# industry version 1 data -----------------------------
.tt_ind_list_verion_1 <- .industry_tbl[.industry_tbl[["reports_version_1"]] == 1, ][["\u7DE8\u865F"]]
.tt_ind_verion_1_tbl <- .industry_tbl[.industry_tbl[["\u7DE8\u865F"]] %in% .tt_ind_list_verion_1, ][c("\u7DE8\u865F", "industry", "reports_version_1_order")]
.tt_ind_verion_1_tbl_en <- .industry_tbl_en[.industry_tbl_en[["index"]] %in% .tt_ind_list_verion_1, ][c("index", "industry", "reports_version_1_order")]
# industry version 2 data -----------------------------
.tt_ind_list_verion_2 <- .industry_tbl[.industry_tbl[["reports_version_2"]] == 1, ][["\u7DE8\u865F"]]
.tt_ind_verion_2_tbl <- .industry_tbl[.industry_tbl[["\u7DE8\u865F"]] %in% .tt_ind_list_verion_2, ][c("\u7DE8\u865F", "industry", "reports_version_2_order")]
.tt_ind_verion_2_tbl_en <- .industry_tbl_en[.industry_tbl_en[["index"]] %in% .tt_ind_list_verion_2, ][c("index", "industry", "reports_version_2_order")]
# full hsocde data -----------------------------
.full_hscode_tbl <- tt_read_table(tt_get_path("PATH_FULL_HSCODE"))
tmp <- lapply(list(1:2, 3:4, 5:6, 7:8, 9:10), function(x) {
tmp <- unique(.full_hscode_tbl[x])
names(tmp) <- c("hscode", "hscode_cn")
tmp
})
.full_hscode_tbl <- Reduce(rbind, tmp)
# area data -------------------------------------
.area_tbl <- tt_read_table(tt_get_path("PATH_AREA"))
.area_tbl[.area_tbl$areaName == "全球", ][["countryName"]] <- "[\\w\\W]+"
# country name data -----------------------------
.country_ref_list <- readxl::read_xlsx("//172.26.1.102/dstore/重要資料/國家中英文對照.xlsx", skip = 1)
name_var <- c(
"name_ch",                                         # chinese name
paste0("mof.",         c("name", "code", "area")), # MOF
paste0("itc.",         c("name", "code")),         # ITC
paste0("world_bank.",  c("name", "code", "area")), # WORLD BANK
paste0("imf.",         c("name")),                 # IMF
paste0("oxford.",      c("name")),                 # OXFORD
paste0("un_comtrade.", c("name", "code", "iso")),  # UN COMTRADE
paste0("gta.",         c("name")),                 # GTA
paste0("itc_tariff.",  c("name")),                 # ITC TARIFF
paste0("asean.",       c("name", "code")),         # ASEAN
"name_ch2"                                         # same as name_ch
)
names(.country_ref_list) <- name_var
.mof_export_usd_sample_data <- tt_vroom_mof("2019-01", "2019-02", period = 3, dep_month_cols = TRUE)
# save data ------------------------------------
save(
.tt_source_path, .industry_tbl, .industry_tbl_en,
.tt_ind21_tbl, .tt_ind21_tbl_en, .tt_ind21_list,
.tt_ind_verion_1_tbl_en, .tt_ind_list_verion_1,
.tt_ind_verion_2_tbl_en, .tt_ind_list_verion_2,
.full_hscode_tbl, .area_tbl, .country_ref_list,
.mof_export_usd_sample_data,
file = "R/sysdata.rda", compress='xz')
}
getsourcepath()
tt_update_data()
load_all()
start_date <- "2019-01"
end_date <- "2019-03"
period <- 3
sub_hs_digits <- 11
country_list <- NULL
money <- "usd"
industry_type <- "industry21"
destdir <- NULL
verbose <- TRUE
date_info <- tt_parse_date(start_date, end_date, period)
mof_rawdata <- tt_vroom_mof(start_date, end_date, period = period, money = money, dep_month_cols = TRUE)
.df <- mof_rawdata
tmp_tbl <- .industry_tbl_en
stop_if_df_not_contain(.df, c("hscode", "country", "year", "value"))
stop_if_df_not_contain <- function(x, must_have) {
column_names <- names(x)
if (!contain_all_keywords(column_names, must_contain_col <- must_have)) {
missing_cols <- must_contain_col[!(must_contain_col %in% column_names)]
stop("Input data.frame MUST contain column named ", paste0("`", missing_cols, "`", collapse = ", "), "!", call. = FALSE)
}
}
stop_if_df_not_contain(.df, c("hscode", "country", "year", "value"))
!is.null(industry_type)
stopifnot(check_industry_type(industry_type))
industry21
tmp_tbl[["index"]] %in% .tt_ind21_list
tmp_tbl[tmp_tbl[["index"]] %in% .tt_ind21_list, ]
.tt_ind21_list
.tt_ind_list_verion_1
.tt_ind_list_verion_2
tmp_tbl
industry_type
switch (industry_type,
industry21 = {
tmp_tbl <- tmp_tbl[tmp_tbl[["index"]] %in% .tt_ind21_list, ]
},
version1 = {
tmp_tbl <- tmp_tbl[tmp_tbl[["index"]] %in% .tt_ind_list_verion_1, ]
},
version2 = {
tmp_tbl <- tmp_tbl[tmp_tbl[["index"]] %in% .tt_ind_list_verion_2, ]
}
)
!is.null(industry_type)
str2regex
str2regex(c("1234", "12345"), sub = -1)
str2regex
#' @param type Filter specified type.
#' @param major Filter specified major.
#' @param minor Filter specified minor.
#' @param industry_type "all_industry", "industry21", "version1", "version2"
#' @param col_more append type, major, minor and industry columns.
#' @param verbose TRUE or FALSE.
#'
#' @return A data frame
#'
#' @export
tt_bind_industry <- function(.df, sub = 11, index = NULL, type = NULL, major = NULL, minor = NULL,
industry_type = "all_industry", col_more = FALSE, verbose = FALSE) {
tmp_tbl <- .industry_tbl_en
stop_if_df_not_contain(.df, c("hscode", "country", "year", "value"))
if (!is.null(industry_type)) {
stopifnot(check_industry_type(industry_type))
switch (industry_type,
industry21 = {tmp_tbl <- tmp_tbl[tmp_tbl[["index"]] %in% .tt_ind21_list, ]},
version1 = {tmp_tbl <- tmp_tbl[tmp_tbl[["index"]] %in% .tt_ind_list_verion_1, ]},
version2 = {tmp_tbl <- tmp_tbl[tmp_tbl[["index"]] %in% .tt_ind_list_verion_2, ]}
)
} else {
# Filter by index
if (!is.null(index)) {
if (!all(stringr::str_length(index) == 3)) {stop("Invalid index string-length!", call. = FALSE)}
tmp_tbl <- tmp_tbl[tmp_tbl[["index"]] %in% index, ]
}
# Filter by type
if (!is.null(type)) {
type_for_check <- c(
"\u8CA1\u653F\u90E8\u5B9A\u7FA9\u7522\u696D",
"\u5176\u4ED6\u7522\u696D\u5B9A\u7FA9", "5+2\u7522\u696D",
"BEC", "\u5168\u90E8\u7522\u54C1",
"\u8CA1\u653F\u90E8\u5B9A\u7FA9\u7522\u696D-54\u7D30\u9805"
)
if (!all(type %in% type_for_check)) {stop("Invalid tyep string!", call. = FALSE)}
tmp_tbl <- tmp_tbl[tmp_tbl[["type"]] %in% type, ]
}
# Filter by major
if (!is.null(major)) {
major_list <- unique(tmp_tbl[["major"]])
if (!all(major %in% major_list)) {stop("Invalid major string!", call. = FALSE)}
tmp_tbl <- tmp_tbl[tmp_tbl[["major"]] %in% major, ]
}
# Filter by minor
if (!is.null(minor)) {
minor_list <- unique(tmp_tbl[["minor"]])
if (!all(minor %in% minor_list)) {stop("Invalid minor string!", call. = FALSE)}
tmp_tbl <- tmp_tbl[tmp_tbl[["minor"]] %in% minor, ]
}
}
# Only keey `hscode` and `industry` columns
tmp_tbl <- tmp_tbl[c("type", "major", "minor", "hscode", "industry")]
output <- vector("list", length = nrow(tmp_tbl))
for (i in seq_along(output)) {
if (verbose) print_with_time(sprintf("%s (%3s/%3s)", tmp_tbl[i, ][["industry"]], i, length(output)))
output_pattern <- str2regex(tmp_tbl[i, ][["hscode"]], sep = ",", sub = sub)
output_name <- tmp_tbl[i, ][["industry"]]
if (output_name == "\u5168\u90E8\u7522\u54C1_\u5168\u90E8\u7522\u54C1") {
output_pattern <- "[\\w\\W]+"
}
tmp_output <- .df[stringr::str_detect(.df$hscode, output_pattern), ]
if (nrow(tmp_output) == 0) next()
if (!col_more) {
tmp_output$industry <- tmp_tbl[i, ][["industry"]]
} else {
tmp_output$index <- tmp_tbl[i, ][["index"]]
tmp_output$type <- tmp_tbl[i, ][["type"]]
tmp_output$major <- tmp_tbl[i, ][["major"]]
tmp_output$minor <-tmp_tbl[i, ][["minor"]]
tmp_output$industry <- tmp_tbl[i, ][["industry"]]
}
output[[i]] <- tmp_output
}
purrr::reduce(output, dplyr::bind_rows)
}
.df
.df %>% tt_bind_industry(industry_type = "industry21")
#' @param type Filter specified type.
#' @param major Filter specified major.
#' @param minor Filter specified minor.
#' @param industry_type "all_industry", "industry21", "version1", "version2"
#' @param col_more append type, major, minor and industry columns.
#' @param verbose TRUE or FALSE.
#'
#' @return A data frame
#'
#' @export
tt_bind_industry <- function(.df, sub = 11, index = NULL, type = NULL, major = NULL, minor = NULL,
industry_type = "all_industry", col_more = FALSE, verbose = TRUE) {
tmp_tbl <- .industry_tbl_en
stop_if_df_not_contain(.df, c("hscode", "country", "year", "value"))
if (!is.null(industry_type)) {
stopifnot(check_industry_type(industry_type))
switch (industry_type,
industry21 = {tmp_tbl <- tmp_tbl[tmp_tbl[["index"]] %in% .tt_ind21_list, ]},
version1 = {tmp_tbl <- tmp_tbl[tmp_tbl[["index"]] %in% .tt_ind_list_verion_1, ]},
version2 = {tmp_tbl <- tmp_tbl[tmp_tbl[["index"]] %in% .tt_ind_list_verion_2, ]}
)
} else {
# Filter by index
if (!is.null(index)) {
if (!all(stringr::str_length(index) == 3)) {stop("Invalid index string-length!", call. = FALSE)}
tmp_tbl <- tmp_tbl[tmp_tbl[["index"]] %in% index, ]
}
# Filter by type
if (!is.null(type)) {
type_for_check <- c(
"\u8CA1\u653F\u90E8\u5B9A\u7FA9\u7522\u696D",
"\u5176\u4ED6\u7522\u696D\u5B9A\u7FA9", "5+2\u7522\u696D",
"BEC", "\u5168\u90E8\u7522\u54C1",
"\u8CA1\u653F\u90E8\u5B9A\u7FA9\u7522\u696D-54\u7D30\u9805"
)
if (!all(type %in% type_for_check)) {stop("Invalid tyep string!", call. = FALSE)}
tmp_tbl <- tmp_tbl[tmp_tbl[["type"]] %in% type, ]
}
# Filter by major
if (!is.null(major)) {
major_list <- unique(tmp_tbl[["major"]])
if (!all(major %in% major_list)) {stop("Invalid major string!", call. = FALSE)}
tmp_tbl <- tmp_tbl[tmp_tbl[["major"]] %in% major, ]
}
# Filter by minor
if (!is.null(minor)) {
minor_list <- unique(tmp_tbl[["minor"]])
if (!all(minor %in% minor_list)) {stop("Invalid minor string!", call. = FALSE)}
tmp_tbl <- tmp_tbl[tmp_tbl[["minor"]] %in% minor, ]
}
}
# Only keey `hscode` and `industry` columns
tmp_tbl <- tmp_tbl[c("type", "major", "minor", "hscode", "industry")]
output <- vector("list", length = nrow(tmp_tbl))
for (i in seq_along(output)) {
if (verbose) print_with_time(sprintf("%s (%3s/%3s)", tmp_tbl[i, ][["industry"]], i, length(output)))
output_pattern <- str2regex(tmp_tbl[i, ][["hscode"]], sep = ",", sub = sub)
output_name <- tmp_tbl[i, ][["industry"]]
if (output_name == "\u5168\u90E8\u7522\u54C1_\u5168\u90E8\u7522\u54C1") {
output_pattern <- "[\\w\\W]+"
}
tmp_output <- .df[stringr::str_detect(.df$hscode, output_pattern), ]
if (nrow(tmp_output) == 0) next()
if (!col_more) {
tmp_output$industry <- tmp_tbl[i, ][["industry"]]
} else {
tmp_output$index <- tmp_tbl[i, ][["index"]]
tmp_output$type <- tmp_tbl[i, ][["type"]]
tmp_output$major <- tmp_tbl[i, ][["major"]]
tmp_output$minor <-tmp_tbl[i, ][["minor"]]
tmp_output$industry <- tmp_tbl[i, ][["industry"]]
}
output[[i]] <- tmp_output
}
purrr::reduce(output, dplyr::bind_rows)
}
#' @param type Filter specified type.
#' @param major Filter specified major.
#' @param minor Filter specified minor.
#' @param industry_type "all_industry", "industry21", "version1", "version2"
#' @param col_more append type, major, minor and industry columns.
#' @param verbose TRUE or FALSE.
#'
#' @return A data frame
#'
#' @export
tt_bind_industry <- function(.df, sub = 11, index = NULL, type = NULL, major = NULL, minor = NULL,
industry_type = "all_industry", col_more = FALSE, verbose = TRUE) {
tmp_tbl <- .industry_tbl_en
stop_if_df_not_contain(.df, c("hscode", "country", "year", "value"))
if (!is.null(industry_type)) {
stopifnot(check_industry_type(industry_type))
switch (industry_type,
industry21 = {tmp_tbl <- tmp_tbl[tmp_tbl[["index"]] %in% .tt_ind21_list, ]},
version1 = {tmp_tbl <- tmp_tbl[tmp_tbl[["index"]] %in% .tt_ind_list_verion_1, ]},
version2 = {tmp_tbl <- tmp_tbl[tmp_tbl[["index"]] %in% .tt_ind_list_verion_2, ]}
)
} else {
# Filter by index
if (!is.null(index)) {
if (!all(stringr::str_length(index) == 3)) {stop("Invalid index string-length!", call. = FALSE)}
tmp_tbl <- tmp_tbl[tmp_tbl[["index"]] %in% index, ]
}
# Filter by type
if (!is.null(type)) {
type_for_check <- c(
"\u8CA1\u653F\u90E8\u5B9A\u7FA9\u7522\u696D",
"\u5176\u4ED6\u7522\u696D\u5B9A\u7FA9", "5+2\u7522\u696D",
"BEC", "\u5168\u90E8\u7522\u54C1",
"\u8CA1\u653F\u90E8\u5B9A\u7FA9\u7522\u696D-54\u7D30\u9805"
)
if (!all(type %in% type_for_check)) {stop("Invalid tyep string!", call. = FALSE)}
tmp_tbl <- tmp_tbl[tmp_tbl[["type"]] %in% type, ]
}
# Filter by major
if (!is.null(major)) {
major_list <- unique(tmp_tbl[["major"]])
if (!all(major %in% major_list)) {stop("Invalid major string!", call. = FALSE)}
tmp_tbl <- tmp_tbl[tmp_tbl[["major"]] %in% major, ]
}
# Filter by minor
if (!is.null(minor)) {
minor_list <- unique(tmp_tbl[["minor"]])
if (!all(minor %in% minor_list)) {stop("Invalid minor string!", call. = FALSE)}
tmp_tbl <- tmp_tbl[tmp_tbl[["minor"]] %in% minor, ]
}
}
# Only keey `hscode` and `industry` columns
tmp_tbl <- tmp_tbl[c("type", "major", "minor", "hscode", "industry")]
output <- vector("list", length = nrow(tmp_tbl))
for (i in seq_along(output)) {
if (verbose) print_with_time(sprintf("%s (%3s/%3s)", tmp_tbl[i, ][["industry"]], i, length(output)))
output_pattern <- str2regex(tmp_tbl[i, ][["hscode"]], sep = ",", sub = sub)
output_name <- tmp_tbl[i, ][["industry"]]
if (output_name == "\u5168\u90E8\u7522\u54C1_\u5168\u90E8\u7522\u54C1") {
output_pattern <- "[\\w\\W]+"
}
tmp_output <- .df[stringr::str_detect(.df$hscode, output_pattern), ]
if (nrow(tmp_output) == 0) next()
if (!col_more) {
tmp_output$industry <- tmp_tbl[i, ][["industry"]]
} else {
tmp_output$index <- tmp_tbl[i, ][["index"]]
tmp_output$type <- tmp_tbl[i, ][["type"]]
tmp_output$major <- tmp_tbl[i, ][["major"]]
tmp_output$minor <-tmp_tbl[i, ][["minor"]]
tmp_output$industry <- tmp_tbl[i, ][["industry"]]
}
output[[i]] <- tmp_output
}
purrr::reduce(output, dplyr::bind_rows)
}
.df %>% tt_bind_industry(industry_type = "industry21")
tmp_tbl <- .industry_tbl_en
stop_if_df_not_contain(.df, c("hscode", "country", "year", "value"))
if (!is.null(industry_type)) {
stopifnot(check_industry_type(industry_type))
switch (industry_type,
industry21 = {tmp_tbl <- tmp_tbl[tmp_tbl[["index"]] %in% .tt_ind21_list, ]},
version1 = {tmp_tbl <- tmp_tbl[tmp_tbl[["index"]] %in% .tt_ind_list_verion_1, ]},
version2 = {tmp_tbl <- tmp_tbl[tmp_tbl[["index"]] %in% .tt_ind_list_verion_2, ]}
)
} else {
# Filter by index
if (!is.null(index)) {
if (!all(stringr::str_length(index) == 3)) {stop("Invalid index string-length!", call. = FALSE)}
tmp_tbl <- tmp_tbl[tmp_tbl[["index"]] %in% index, ]
}
# Filter by type
if (!is.null(type)) {
type_for_check <- c(
"\u8CA1\u653F\u90E8\u5B9A\u7FA9\u7522\u696D",
"\u5176\u4ED6\u7522\u696D\u5B9A\u7FA9", "5+2\u7522\u696D",
"BEC", "\u5168\u90E8\u7522\u54C1",
"\u8CA1\u653F\u90E8\u5B9A\u7FA9\u7522\u696D-54\u7D30\u9805"
)
if (!all(type %in% type_for_check)) {stop("Invalid tyep string!", call. = FALSE)}
tmp_tbl <- tmp_tbl[tmp_tbl[["type"]] %in% type, ]
}
# Filter by major
if (!is.null(major)) {
major_list <- unique(tmp_tbl[["major"]])
if (!all(major %in% major_list)) {stop("Invalid major string!", call. = FALSE)}
tmp_tbl <- tmp_tbl[tmp_tbl[["major"]] %in% major, ]
}
# Filter by minor
if (!is.null(minor)) {
minor_list <- unique(tmp_tbl[["minor"]])
if (!all(minor %in% minor_list)) {stop("Invalid minor string!", call. = FALSE)}
tmp_tbl <- tmp_tbl[tmp_tbl[["minor"]] %in% minor, ]
}
}
tmp_tbl
# Only keey `hscode` and `industry` columns
tmp_tbl <- tmp_tbl[c("type", "major", "minor", "hscode", "industry")]
tmp_tbl
output <- vector("list", length = nrow(tmp_tbl))
i <- 1
tmp_tbl
if (verbose) print_with_time(sprintf("%s (%3s/%3s)", tmp_tbl[i, ][["industry"]], i, length(output)))
output_pattern <- str2regex(tmp_tbl[i, ][["hscode"]], sep = ",", sub = sub)
sub
sub = 11
output_pattern <- str2regex(tmp_tbl[i, ][["hscode"]], sep = ",", sub = sub)
output_pattern
output_name <- tmp_tbl[i, ][["industry"]]
output_name
.df[stringr::str_detect(.df$hscode, output_pattern), ]
tmp_output <- .df[stringr::str_detect(.df$hscode, output_pattern), ]
tmp_output
tmp_output
col_more <- TRUE
!col_more
tmp_tbl
tmp_tbl
tmp_output
tmp_tbl[i, ]
document()
load_all()
load_all()
.mof_export_usd_sample_data %>% tt_industry_grouped_sum(industryType = "industry21")
tt_bind_industry
load_all()
.mof_export_usd_sample_data %>% tt_industry_grouped_sum(industryType = "industry21")
x <- .mof_export_usd_sample_data
industry_type = "all_industry"
stopifnot(check_industry_type(industry_type))
x
tmp_data <- tt_grouped_sum(x, hscode, country, year)
tmp_data
sub = 11
verbose = TRUE
tt_bind_industry(tmp_data, sub = sub, col_more = TRUE, industry_type = industry_type, verbose = verbose)
industry_type <- "industry21"
tmp_data <- tt_bind_industry(tmp_data, sub = sub, col_more = TRUE, industry_type = industry_type, verbose = verbose)
tmp_data
tt_grouped_sum(tmp_data, type, major, minor, industry, country, year)
tmp_data <- tt_grouped_sum(tmp_data, type, major, minor, industry, country, year)
list(
industry_type = industry_type,
data = tmp_data
)
load_all()
x
x %>% tt_industry_grouped_sum()
document()
load_all()
check()
# TODO Adding some common
getsourcepath <- function() {
tmp_path <- readxl::read_xlsx("inst/extdata/tt_source_path.xlsx")
.tt_source_path <- as.list(tmp_path$path)
names(.tt_source_path) <- tmp_path$name
save(.tt_source_path, file = "R/sysdata.rda", compress='xz')
}
tt_update_data <- function() {
# tt_source_path data -------------------------
tmp_path <- readxl::read_xlsx("inst/extdata/tt_source_path.xlsx")
.tt_source_path <- as.list(tmp_path$path)
names(.tt_source_path) <- tmp_path$name
# industry data -----------------------------
.industry_tbl <- tt_read_table(tt_get_path("PATH_INDUSTRY")) %>%
dplyr::mutate_at(dplyr::vars("reports_version_industry21", "reports_version_1", "reports_version_2"), list(~ tidyr::replace_na(., 0)))
.industry_tbl_en <- rlang::set_names(.industry_tbl, c("index", "type", "major", "minor", "hscode6", "hscode11", "hscode_dights",
"hscode", "industry", "reports_version_1", "reports_version_1_order", "reports_version_2",
"reports_version_2_order", "reports_version_2_ind_name", "reports_version_industry21", "reports_version_industry21_order"))
# industry21 data -----------------------------
.tt_ind21_list <- .industry_tbl[.industry_tbl[["reports_version_industry21"]] == 1, ][["\u7DE8\u865F"]]
.tt_ind21_tbl <- .industry_tbl[.industry_tbl[["\u7DE8\u865F"]] %in% .tt_ind21_list, ][c("\u7DE8\u865F", "industry", "reports_version_industry21_order")]
.tt_ind21_tbl_en <- .industry_tbl_en[.industry_tbl_en[["index"]] %in% .tt_ind21_list, ][c("index", "industry", "reports_version_industry21_order")]
# industry version 1 data -----------------------------
.tt_ind_list_verion_1 <- .industry_tbl[.industry_tbl[["reports_version_1"]] == 1, ][["\u7DE8\u865F"]]
.tt_ind_verion_1_tbl <- .industry_tbl[.industry_tbl[["\u7DE8\u865F"]] %in% .tt_ind_list_verion_1, ][c("\u7DE8\u865F", "industry", "reports_version_1_order")]
.tt_ind_verion_1_tbl_en <- .industry_tbl_en[.industry_tbl_en[["index"]] %in% .tt_ind_list_verion_1, ][c("index", "industry", "reports_version_1_order")]
# industry version 2 data -----------------------------
.tt_ind_list_verion_2 <- .industry_tbl[.industry_tbl[["reports_version_2"]] == 1, ][["\u7DE8\u865F"]]
.tt_ind_verion_2_tbl <- .industry_tbl[.industry_tbl[["\u7DE8\u865F"]] %in% .tt_ind_list_verion_2, ][c("\u7DE8\u865F", "industry", "reports_version_2_order")]
.tt_ind_verion_2_tbl_en <- .industry_tbl_en[.industry_tbl_en[["index"]] %in% .tt_ind_list_verion_2, ][c("index", "industry", "reports_version_2_order")]
# full hsocde data -----------------------------
.full_hscode_tbl <- tt_read_table(tt_get_path("PATH_FULL_HSCODE"))
tmp <- lapply(list(1:2, 3:4, 5:6, 7:8, 9:10), function(x) {
tmp <- unique(.full_hscode_tbl[x])
names(tmp) <- c("hscode", "hscode_cn")
tmp
})
.full_hscode_tbl <- Reduce(rbind, tmp)
# area data -------------------------------------
.area_tbl <- tt_read_table(tt_get_path("PATH_AREA"))
.area_tbl[.area_tbl$areaName == "全球", ][["countryName"]] <- "[\\w\\W]+"
# country name data -----------------------------
.country_ref_list <- readxl::read_xlsx("//172.26.1.102/dstore/重要資料/國家中英文對照.xlsx", skip = 1)
name_var <- c(
"name_ch",                                         # chinese name
paste0("mof.",         c("name", "code", "area")), # MOF
paste0("itc.",         c("name", "code")),         # ITC
paste0("world_bank.",  c("name", "code", "area")), # WORLD BANK
paste0("imf.",         c("name")),                 # IMF
paste0("oxford.",      c("name")),                 # OXFORD
paste0("un_comtrade.", c("name", "code", "iso")),  # UN COMTRADE
paste0("gta.",         c("name")),                 # GTA
paste0("itc_tariff.",  c("name")),                 # ITC TARIFF
paste0("asean.",       c("name", "code")),         # ASEAN
"name_ch2"                                         # same as name_ch
)
names(.country_ref_list) <- name_var
.mof_export_usd_sample_data <- tt_vroom_mof("2019-01", "2019-02", period = 3, dep_month_cols = TRUE)
# save data ------------------------------------
save(
.tt_source_path, .industry_tbl, .industry_tbl_en,
.tt_ind21_tbl, .tt_ind21_tbl_en, .tt_ind21_list,
.tt_ind_verion_1_tbl_en, .tt_ind_list_verion_1,
.tt_ind_verion_2_tbl_en, .tt_ind_list_verion_2,
.full_hscode_tbl, .area_tbl, .country_ref_list,
.mof_export_usd_sample_data,
file = "R/sysdata.rda", compress='xz')
}
getsourcepath()
tt_update_data()
install()
document()
install()
build()
